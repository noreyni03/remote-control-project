package fr.uvsq.server;

import fr.uvsq.core.CommandProcessor;
import fr.uvsq.core.AuthManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.util.function.Consumer;

/**
 * La classe `ClientHandler` g√®re la communication avec un client connect√© au serveur.
 * Elle impl√©mente l'interface `Runnable` pour pouvoir √™tre ex√©cut√©e dans un thread s√©par√©,
 * permettant ainsi de g√©rer plusieurs clients simultan√©ment.
 *
 * Chaque instance de `ClientHandler` est responsable de :
 * - La r√©ception des commandes envoy√©es par un client.
 * - L'ex√©cution de ces commandes via un `CommandProcessor`.
 * - L'envoi des r√©sultats de l'ex√©cution au client.
 * - La gestion des erreurs de communication et la d√©connexion du client.
 */
public class ClientHandler implements Runnable {
    private static final Logger logger = LoggerFactory.getLogger(ClientHandler.class);
    private static final String END_MARKER = "###END###";

    private final Socket clientSocket;
    private final CommandProcessor processor = new CommandProcessor();
    private final AuthManager authManager = new AuthManager(); // Ajout de l'AuthManager
    private final Consumer<String> logCallback;

    /**
     * Constructeur de `ClientHandler`.
     *
     * @param socket      Le socket de communication avec le client.
     * @param logCallback Une fonction de rappel (callback) pour l'affichage des logs.
     *                    Cette fonction prend une cha√Æne de caract√®res (le message de log) en entr√©e.
     */
    public ClientHandler(Socket socket, Consumer<String> logCallback) {
        this.clientSocket = socket;
        this.logCallback = logCallback;
    }

    /**
     * M√©thode ex√©cut√©e par le thread lorsque le `ClientHandler` est d√©marr√©.
     * G√®re la communication avec le client :
     * - √âtablit les flux d'entr√©e/sortie pour la communication.
     * - R√©cup√®re l'identifiant du client (adresse IP et port).
     * - V√©rifie l'authentification avant de traiter les commandes.
     * - Boucle pour lire les commandes envoy√©es par le client.
     * - Ex√©cute les commandes via le `CommandProcessor`.
     * - Envoie la r√©ponse au client, suivie du marqueur de fin `END_MARKER`.
     * - G√®re les erreurs de communication.
     * - G√®re la d√©connexion du client.
     */
    @Override
    public void run() {
        // Utilisation de try-with-resources pour s'assurer que les flux sont bien ferm√©s √† la fin.
        try (BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream(), StandardCharsets.UTF_8));
             PrintWriter out = new PrintWriter(new OutputStreamWriter(clientSocket.getOutputStream(), StandardCharsets.UTF_8), true)) {

            String clientId = clientSocket.getInetAddress() + ":" + clientSocket.getPort();
            logCallback.accept("üì© Handling client: " + clientId);

            // V√©rification de l'authentification
            String authSignal = in.readLine();
            if (!"AUTH".equals(authSignal)) {
                logCallback.accept("‚ö†Ô∏è Client " + clientId + " n'a pas envoy√© AUTH.");
                out.println("ERROR: Authentification requise.");
                return; // Ferme la connexion si AUTH n'est pas envoy√©
            }

            String login = in.readLine();
            String password = in.readLine();
            if (authManager.authenticate(login, password)) {
                logCallback.accept("‚úÖ Client " + clientId + " authentifi√© avec succ√®s.");
                out.println("OK"); // Envoie "OK" pour confirmer l'authentification
            } else {
                logCallback.accept("‚ùå √âchec de l'authentification pour " + clientId);
                out.println("ERROR: Identifiants incorrects.");
                return; // Ferme la connexion si les identifiants sont faux
            }

            String command;
            // Lecture des commandes envoy√©es par le client jusqu'√† ce que la connexion soit coup√©e.
            while ((command = in.readLine()) != null) {
                logCallback.accept("Received command: " + command);
                // Ex√©cution de la commande et r√©cup√©ration de la r√©ponse.
                String response = processor.executeCommand(command);
                // Envoi de la r√©ponse au client.
                out.println(response);
                // Envoi du marqueur de fin.
                out.println(END_MARKER);
            }
        } catch (Exception e) {
            // Gestion des erreurs de communication.
            logCallback.accept("‚ö†Ô∏è Client connection error: " + e.getMessage());
        } finally {
            // Gestion de la d√©connexion du client.
            logCallback.accept("üîå Client disconnected");
        }
    }
}